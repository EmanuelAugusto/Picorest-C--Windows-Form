<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAQAAAAAAAAAAgAAAAQAAAAEAAAABAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJIAAACWAAAAAAAAAJQAAACdAAAAnQAAAJQAAAAAAAAAlgAA
        AJIAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAMAAAACAAAADgAAAIwAAACZAAAAlgAAAJYAAACZAAAAjAAA
        AA4AAAACAAAAAwAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAkgAAAJYAAAAAAAAAlAAAAJ0AAACdAAAAlAAA
        AAAAAACWAAAAkgAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAIAAAAcwAAAH0AAAB7AAAAewAA
        AH0AAABzAAAACAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABAAAAAAAAACSAAAAlgAAAAAAAACUAAAAnQAA
        AJ0AAACUAAAAAAAAAJYAAACSAAAAAAAAAAQAAAAAAAAAAgAAAAAAAABJAAAAnQAAAI4AAACBAAAAfwAA
        AIAAAACAAAAAfwAAAIEAAACOAAAAnQAAAEkAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAJIAAACWAAAAAAAA
        AJQAAACdAAAAnQAAAJQAAAAAAAAAlgAAAJIAAAAAAAAABAAAAAAAAAACAAAAAAAAAEkAAACdAAAAjgAA
        AIEAAAB/AAAAgAAAAIAAAAB/AAAAgQAAAI4AAACdAAAASQAAAAAAAAACAAAAAAAAAAQAAAAAAAAAkgAA
        AJYAAAAAAAAAlAAAAJ0AAACdAAAAlAAAAAAAAACVAAAAkwAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAQAA
        AAAAAAAIAAAAcwAAAH0AAAB7AAAAewAAAH0AAABzAAAACAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABAAA
        AAAAAACTAAAAlQAAAAAAAACUAAAAnQAAAJ0AAACUAAAAAAAAAJMAAACUAAAAAAAAAAkAAAAEAAAABAAA
        AAQAAAAHAAAABgAAABIAAACRAAAAnQAAAJoAAACaAAAAnQAAAJEAAAASAAAABgAAAAcAAAAEAAAABAAA
        AAQAAAAJAAAAAAAAAJQAAACTAAAAAAAAAJQAAACdAAAAnQAAAJMAAAAAAAAAXwAAANQAAAAAAAAAAAAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAAAAAAAAAAA1AAAAF8AAAAAAAAAkwAAAJ0AAACdAAAAkAAAAAAAAAABAAAAsgAA
        ANwAAACPAAAAkgAAAJIAAACSAAAAkgAAAJIAAACSAAAAlgAAAJYAAACWAAAAlgAAAJYAAACWAAAAkgAA
        AJIAAACSAAAAkgAAAJIAAACSAAAAjwAAANwAAACyAAAAAQAAAAAAAACQAAAAnQAAAJwAAACSAAAAAAAA
        AAgAAAADAAAAYAAAAJkAAACWAAAAlgAAAJYAAACWAAAAlgAAAJYAAACWAAAAlgAAAJYAAACWAAAAlgAA
        AJYAAACWAAAAlgAAAJYAAACWAAAAlgAAAJYAAACZAAAAYAAAAAMAAAAIAAAAAAAAAJIAAACcAAAAmwAA
        AI4AAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAjgAA
        AJsAAACRAAAA1gAAAIQAAACRAAAAkAAAAJMAAACUAAAAlAAAAJQAAACUAAAAlAAAAJQAAACUAAAAlAAA
        AJQAAACUAAAAlAAAAJQAAACUAAAAlAAAAJQAAACUAAAAlAAAAJQAAACUAAAAlAAAAJMAAACQAAAAkQAA
        AIQAAADWAAAAkQAAADkAAACYAAAAnQAAAJwAAACdAAAAnQAAAJ0AAACdAAAAnQAAAJ0AAACdAAAAnQAA
        AJ0AAACdAAAAnQAAAJ0AAACdAAAAnQAAAJ0AAACdAAAAnQAAAJ0AAACdAAAAnQAAAJ0AAACdAAAAnQAA
        AJ0AAACcAAAAnQAAAJgAAAA56IioAfoi6AHoiKgB6CCoAeQBNALkiSQCBIkBCPQBfQsAAAAAAAAAACgA
        ugQoIAAEIFAABCAgugQgAICkJAE6JCYCP6QlBL+kJFALpCUE/6QlQAKkJdALpCVAAqQlQAKkJNALJCQA
        ACQm//9kIAAABCAAAAQv///0AAAAAAAAAAA=
</value>
  </data>
</root>